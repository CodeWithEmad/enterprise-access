# Generated by Django 3.2.20 on 2023-08-18 15:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('subsidy_access_policy', '0013_policy_proxy_models_history_tables'),
    ]

    operations = [
        migrations.CreateModel(
            name='AssignmentPolicy',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('subsidy_access_policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment_policy', to='subsidy_access_policy.subsidyaccesspolicy', unique=True)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LearnerContentAssignment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('learner_email', models.EmailField(db_index=True, help_text='Email of learner to assign content. Automatically scrubbed after 90 days.', max_length=254)),
                ('lms_user_id', models.IntegerField(blank=True, db_index=True, help_text='The id of the Open edX LMS user record with which this LearnerContentAssignment is associated. This may be null at time of creation.', null=True)),
                ('content_key', models.CharField(db_index=True, help_text='The globally unique content identifier to assign to the learner.  Joinable with ContentMetadata.content_key in enterprise-catalog.', max_length=255)),
                ('content_quantity', models.BigIntegerField(help_text='Cost of the content in USD Cents.')),
                ('state', models.CharField(choices=[('allocated', 'Allocated'), ('accepted', 'Accepted'), ('cancelled', 'Cancelled'), ('errored', 'Errored')], default='allocated', help_text="The current state of the LearnerContentAssignment. One of: ['allocated', 'accepted', 'cancelled', 'errored']", max_length=255)),
                ('transaction_uuid', models.UUIDField(blank=True, help_text='A reference to the ledger transaction associated with the subsidy supporting this assignment.  Likely null if state != accepted.', null=True)),
                ('last_notification_at', models.DateTimeField(blank=True, help_text='The last time the learner was notified or reminded about this assignment.  Null means the learner has not been notified.', null=True)),
                ('assignment_policy', models.ForeignKey(help_text='AssignmentPolicy defining the lifecycle rules of this assignment.', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='content_assignments.assignmentpolicy')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalLearnerContentAssignment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('learner_email', models.EmailField(db_index=True, help_text='Email of learner to assign content. Automatically scrubbed after 90 days.', max_length=254)),
                ('lms_user_id', models.IntegerField(blank=True, db_index=True, help_text='The id of the Open edX LMS user record with which this LearnerContentAssignment is associated. This may be null at time of creation.', null=True)),
                ('content_key', models.CharField(db_index=True, help_text='The globally unique content identifier to assign to the learner.  Joinable with ContentMetadata.content_key in enterprise-catalog.', max_length=255)),
                ('content_quantity', models.BigIntegerField(help_text='Cost of the content in USD Cents.')),
                ('state', models.CharField(choices=[('allocated', 'Allocated'), ('accepted', 'Accepted'), ('cancelled', 'Cancelled'), ('errored', 'Errored')], default='allocated', help_text="The current state of the LearnerContentAssignment. One of: ['allocated', 'accepted', 'cancelled', 'errored']", max_length=255)),
                ('transaction_uuid', models.UUIDField(blank=True, help_text='A reference to the ledger transaction associated with the subsidy supporting this assignment.  Likely null if state != accepted.', null=True)),
                ('last_notification_at', models.DateTimeField(blank=True, help_text='The last time the learner was notified or reminded about this assignment.  Null means the learner has not been notified.', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assignment_policy', models.ForeignKey(blank=True, db_constraint=False, help_text='AssignmentPolicy defining the lifecycle rules of this assignment.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='content_assignments.assignmentpolicy')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical learner content assignment',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAssignmentPolicy',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('subsidy_access_policy', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='subsidy_access_policy.subsidyaccesspolicy')),
            ],
            options={
                'verbose_name': 'historical assignment policy',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
